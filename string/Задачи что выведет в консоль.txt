–ó–∞–¥–∞—á–∞ 1. –ë–∞–π—Ç—ã vs —Ä—É–Ω—ã

func main() {
	s := "–ü—Ä–∏–≤–µ—Ç"
	fmt.Println(len(s))   // ?
	fmt.Println(len([]rune(s))) // ?
	printBytes(s)
	printRunes(s)
}

func printBytes(s string) {
	for i := 0; i < len(s); i++ {
		fmt.Printf("%x ", s[i])
	}
	fmt.Println()
}

func printRunes(s string) {
	for _, r := range s {
		fmt.Printf("%c ", r)
	}
	fmt.Println()
}

---
–ó–∞–¥–∞—á–∞ 2. –°—Ä–µ–∑ –ø–æ —Å—Ç—Ä–æ–∫–µ

func main() {
	s := "–ü—Ä–∏–≤–µ—Ç"
	sub := s[:4]
	fmt.Println(sub)
}

---
–ó–∞–¥–∞—á–∞ 3. –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ —á–µ—Ä–µ–∑ []byte

func main() {
	s := "hello"
	b := []byte(s)
	b[0] = 'H'
	s2 := string(b)
	fmt.Println(s)
	fmt.Println(s2)
}


---
–ó–∞–¥–∞—á–∞ 4. –ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è Unicode

func main() {
	s := "Áå´"
	s2 := s + "üê±"
	fmt.Println(s, len(s))
	fmt.Println(s2, len(s2))
}

---
–ó–∞–¥–∞—á–∞ 5. –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–æ–∫–µ

func main() {
	s := "–ü—Ä–∏–≤–µ—Ç"
	fmt.Printf("%c\n", s[1])
	fmt.Printf("%c\n", []rune(s)[1])
}


---
–ó–∞–¥–∞—á–∞ 6. range –ø–æ —Å—Ç—Ä–æ–∫–µ

func main() {
	s := "GoË™û"
	for i, r := range s {
		fmt.Printf("%d: %c\n", i, r)
	}
}


---
–ó–∞–¥–∞—á–∞ 7. –ò–∑–º–µ–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ rune slice

func main() {
	s := "–ü—Ä–∏–≤–µ—Ç"
	r := []rune(s)
	r[0] = '–ó'
	s2 := string(r)
	fmt.Println(s)
	fmt.Println(s2)
}

---
–ó–∞–¥–∞—á–∞ 8. –°—Ç—Ä–æ–∫–∏ –∏ append

func main() {
	s := "hi"
	b := []byte(s)
	b = append(b, '!')
	fmt.Println(s)
	fmt.Println(string(b))
}

---
–ó–∞–¥–∞—á–∞ 9. –°—Ç—Ä–æ–∫–∞ —Å emoji

func main() {
	s := "üôÇ"
	fmt.Println(len(s))
	fmt.Println(len([]rune(s)))
}


---
–ó–∞–¥–∞—á–∞ 10. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏

func main() {
	s := "abcdef"
	r := []rune(s)
	sub := string(r[2:5])
	fmt.Println(sub)
}


---
–ó–∞–¥–∞—á–∞ 11
func main() {
	str := "dd–Ø–ôÊº¢"

	//–¢–∞–∫ –∫–∞–∫ –ö–∏—Ä–∏–ª–ª–∏—Ü–∞ –∏ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã –∏–º–µ—é—Ç –±–æ–ª—å—à–µ –±–∞–π—Ç, len –≤—ã–≤–æ–¥–∏—Ç > 5
	fmt.Println("–î–ª–∏–Ω–∞ —á–µ—Ä–µ–∑ len", len(str))                                   // > 5
	fmt.Println("–î–ª–∏–Ω–∞ —á–µ—Ä–µ–∑ RuneCountInStrings", utf8.RuneCountInString(str)) // 5

	str2 := "Güë≥‚Äço"
	//for i := 0; i < len(str); i++ {
	//	fmt.Printf("%c\n", str2[i]) // –≤—ã–≤–µ–¥–µ—Ç "G", "–Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã", "o"
	//}

	// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
	for _, val := range str2 {
		fmt.Println(val)
	}

}
